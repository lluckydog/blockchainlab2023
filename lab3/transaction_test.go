package main

import (
	"encoding/hex"
	"testing"

	//"fmt"
	"crypto/elliptic"
	"encoding/gob"

	"github.com/stretchr/testify/assert"
)

func TestNewUTXOTransaction(t *testing.T) {
	gob.Register(elliptic.P256())
	address, _ := hex.DecodeString("5a63394a78755239507a6f62476f50644e35524d34467a576877594c4d7031656f")
	bc := NewBlockchain()
	defer bc.Close()
	var utxoset UTXOSet
	utxoset.Blockchain = bc
	to, _ := hex.DecodeString("6d51717833706a347a684a506a4267796d553471774c7433323274707868556a33")
	amount := 209999
	tx := NewUTXOTransaction(address, to, amount, &utxoset)
	txid := []byte{0xd0, 0x7b, 0x2b, 0xe4, 0xc1, 0x85, 0xe2, 0xd8, 0x92, 0x20, 0x57, 0x19, 0x38, 0xb9, 0x67, 0x8c, 0x5f, 0x9d, 0x56, 0xd1, 0xbe, 0x43, 0xc6, 0xb4, 0x65, 0xc3, 0xd6, 0x16, 0xfe, 0xe, 0x65, 0x6e}
	assert.Equal(t, tx.ID, txid, "newutxotransaction fails!")
	vintxid := []byte{0xf1, 0x56, 0x21, 0x70, 0xb2, 0xeb, 0x2c, 0xed, 0x78, 0xfa, 0xc8, 0x6b, 0xba, 0xe0, 0xf, 0x2e, 0x27, 0x47, 0xee, 0x90, 0x38, 0xbf, 0x40, 0x1a, 0x5, 0xa1, 0xec, 0xfe, 0x63, 0x1b, 0xf4, 0x47}
	assert.Equal(t, tx.Vin[0].Txid, vintxid, "newutxotransaction fails!")
	assert.Equal(t, tx.Vin[0].Vout, 0, "newutxotransaction fails!")
	vinpbk := []byte{0xe5, 0xf, 0xf1, 0x25, 0x8e, 0x26, 0x8a, 0xff, 0xdc, 0xf2, 0x6f, 0x31, 0x98, 0x3a, 0xd7, 0xa5, 0xe6, 0x25, 0x34, 0x4a, 0x9e, 0x85, 0x71, 0xa8, 0x80, 0x28, 0xb4, 0x3b, 0x74, 0x25, 0x20, 0x14, 0x3c, 0xcb, 0xea, 0x96, 0x71, 0x35, 0x6f, 0xc8, 0x4, 0xe1, 0x2a, 0x2a, 0x24, 0x3c, 0xc4, 0x7d, 0x83, 0x2d, 0xa4, 0x60, 0x71, 0x43, 0x1b, 0x1e, 0xb7, 0x31, 0x67, 0x2c, 0x9e, 0x95, 0xa7, 0x12}
	assert.Equal(t, tx.Vin[0].PubKey, vinpbk, "newutxotransaction fails!")
	assert.Equal(t, tx.Vout[0].Value, 209999, "newutxotransaction fails!")
	pbk := []byte{0xe7, 0x27, 0xf6, 0x57, 0x61, 0xb9, 0x73, 0x61, 0x6f, 0xc7, 0x79, 0xac, 0x85, 0xfd, 0x2b, 0x40, 0x61, 0x59, 0x2, 0xfd}
	assert.Equal(t, tx.Vout[0].PubKeyHash, pbk, "newutxotransaction fails!")
}
